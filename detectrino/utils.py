# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_utils.ipynb (unless otherwise specified).

__all__ = ['RLE']

# Cell
from .basics import *

# Cell
class RLE:
    def __init__(self, v, h, w): store_attr(self, 'v,h,w')
    @classmethod
    def from_str(cls, s, h, w):
        v = np.array(s.split(), dtype=np.uint)
        return cls(v, h, w)

# Cell
@patch
def decode(self:RLE):
    'From https://www.kaggle.com/julienbeaulieu/imaterialist-detectron2'
    mask = np.full(self.h*self.w, 0, dtype=np.uint8)
    for i, start_pixel in enumerate(self.v[::2]):
        mask[start_pixel: start_pixel+self.v[2*i+1]] = 1
    mask = mask.reshape((self.h, self.w), order='F')
    return mask

# Cell
@patch
def to_bbox(self:RLE):
    'From https://www.kaggle.com/julienbeaulieu/imaterialist-detectron2'
    shape = (self.h,self.w)
    a = self.v
    a = a.reshape((-1, 2))  # an array of (start, length) pairs
    a[:,0] -= 1  # `start` is 1-indexed
    y0 = a[:,0] % shape[0]
    y1 = y0 + a[:,1]
    if np.any(y1 > shape[0]):
        # got `y` overrun, meaning that there are a pixels in mask on 0 and shape[0] position
        y0 = 0
        y1 = shape[0]
    else:
        y0 = np.min(y0)
        y1 = np.max(y1)
    x0 = a[:,0] // shape[0]
    x1 = (a[:,0] + a[:,1]) // shape[0]
    x0 = np.min(x0)
    x1 = np.max(x1)
    if x1 > shape[1]:
        # just went out of the image dimensions
        raise ValueError("invalid self or image dimensions: x1=%d > shape[1]=%d" % (
            x1, shape[1]
        ))
    return x0, y0, x1, y1